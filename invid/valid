

  validation {
    condition = alltrue([
      for config in var.access_config : 
      (
        config.authentication_mode == "CONFIG_MAP" || 
        config.authentication_mode == "API" || 
        config.authentication_mode == "API_AND_CONFIG_MAP"
      ) &&
      (config.bootstrap_cluster_admin_permission == true || config.bootstrap_cluster_admin_permission == false)
    ])
    error_message = "authentication_mode must be 'CONFIG_MAP', 'API', or 'API_AND_CONFIG_MAP', and bootstrap_cluster_admin_permission must be true or false."
  }

#version 
variable "cluster_version" {
  description = "Kubernetes <major>.<minor> version to use for the EKS cluster (i.e.: 1.27)"
  type        = string
  default     = null

  validation {
    condition     = can(regex("^\\d+\\.\\d+$", var.cluster_version)) && (var.cluster_version != "")
    error_message = "Cluster version must be in the format <major>.<minor> (e.g., '1.27')."
  }
}

#timeout 
validation {
    condition = alltrue([
      for key, value in var.timeout : 
        (key == "create" || key == "update" || key == "delete") &&
        can(regex("^\\d+[smhdwMy]?$", value))
    ])
    error_message = "Each timeout value must be in a valid duration format (e.g., '30m', '1h', '2d') for create, update, and delete keys."
  }


##vpc config 
variable "vpc_config" {
  description = "Configuration for VPC, including endpoint settings and subnet set"
  type = object({
    endpoint_private = bool
    endpoint_public  = bool
    subnet_set       = set(string)
  })
  default = {
    endpoint_private = true
    endpoint_public  = false
    subnet_set       = []
  }

  validation {
    # Ensure the endpoint_private and endpoint_public are booleans
    condition = (
      (var.vpc_config.endpoint_private == true || var.vpc_config.endpoint_private == false) &&
      (var.vpc_config.endpoint_public == true || var.vpc_config.endpoint_public == false) &&
      can(list(var.vpc_config.subnet_set)) &&
      alltrue([for subnet in var.vpc_config.subnet_set : can(regex("^subnet-[0-9a-f]+$", subnet))])
    )
    error_message = "endpoint_private and endpoint_public must be boolean values, and subnet_set must contain valid subnet IDs (e.g., 'subnet-12345678')."
  }
}

## eks log type 
variable "eks_log_types" {
  description = "EKS log types to enable for the cluster (e.g., 'api', 'audit', 'authenticator', 'controllerManager', 'scheduler')"
  type        = set(string)  # Use set to allow unique values
  default     = ["api"]  # Default log type can be a single value or list

  validation {
    condition = alltrue([
      for log_type in var.eks_log_types : 
        log_type == "api" || 
        log_type == "audit" || 
        log_type == "authenticator" || 
        log_type == "controllerManager" || 
        log_type == "scheduler"
    ])
    error_message = "eks_log_types must be a list/set of valid values: 'api', 'audit', 'authenticator', 'controllerManager', or 'scheduler'."
  }
}


### bootsrap addons 
variable "bootstrap_addons" {
  description = "Whether to enable bootstrap addons for the EKS cluster"
  type        = bool
  default     = true

  validation {
    condition     = var.bootstrap_addons == true || var.bootstrap_addons == false
    error_message = "bootstrap_addons must be a boolean value (true or false)."
  }
}


wks sg ###############
variable "aks_sg_name" {
  description = "The name of the security group for EKS Control Plane"
  type        = string

  validation {
    condition     = length(var.aks_sg_name) > 0
    error_message = "The aks_sg_name variable must not be empty."
  }
}

variable "vpc_id" {
  description = "VPC ID where the EKS cluster will be deployed"
  type        = string

  validation {
    condition     = can(regex("^vpc-[a-zA-Z0-9]+$", var.vpc_id))
    error_message = "The vpc_id variable must be a valid VPC ID (e.g., vpc-12345678)."
  }
}

variable "eks_sg_ingress" {
  description = "The eks sg ingress parameters."
  type = list(object({
    description = string
    from_port   = number
    to_port     = number
    protocol    = string
    cidr_blocks = list(string)
  }))

  validation {
    condition     = length(var.eks_sg_ingress) > 0
    error_message = "The eks_sg_ingress variable must contain at least one ingress rule."
  }
}

variable "eks_sg_egress" {
  description = "The eks sg egress parameters."
  type = list(object({
    description = string
    from_port   = number
    to_port     = number
    protocol    = string
    cidr_blocks = list(string)
  }))

  validation {
    condition     = length(var.eks_sg_egress) > 0
    error_message = "The eks_sg_egress variable must contain at least one egress rule."
  }
}

variable "cluster_addons" {
  description = "Map of the EKS Addons to create"
  type        = map(any)

  validation {
    condition     = length(var.cluster_addons) > 0
    error_message = "The cluster_addons variable must not be empty."
  }
}

variable "eks_access_entities" {
  description = "List of EKS access entities."
  type = map(object({
    kubernetes_groups = list(string)
    principal_arn     = string
    type              = string
    tags              = map(string)
  }))

  validation {
    condition     = length(var.eks_access_entities) > 0
    error_message = "The eks_access_entities variable must contain at least one entity."
  }
}

variable "eks_access_policies" {
  description = "Map of EKS access policies"
  type = map(object({
    name = string
    policy = object({
      actions   = list(string)
      resources = list(string)
    })
    type = string
  }))

  validation {
    condition     = length(var.eks_access_policies) > 0
    error_message = "The eks_access_policies variable must contain at least one policy."
  }
}

